# bohdi1/kosa-bot/kosa_bot_v3.py
import asyncio
import logging
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

try:
    from aiogram import Bot, Dispatcher, F, Router
    from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
    from aiogram.enums import ParseMode
    from aiogram.filters import CommandStart, Command
    from aiogram.client.default import DefaultBotProperties
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
except ModuleNotFoundError:
    print("–ü–û–ú–ò–õ–ö–ê: –ù–µ–æ–±—Ö—ñ–¥–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É 'aiogram' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó, –≤—ñ–¥–∫—Ä–∏–≤—à–∏ —Ç–µ—Ä–º—ñ–Ω–∞–ª (–∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫) —Ç–∞ –≤–∏–∫–æ–Ω–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É:")
    print("pip install -r requirements.txt")
    print("–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É.")
    sys.exit()

# –ë–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ ID —á–∞—Ç—É –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_CHAT_ID = os.getenv('CHAT_ID')

if not API_TOKEN:
    print("–ü–û–ú–ò–õ–ö–ê: API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
    sys.exit()
if not ADMIN_CHAT_ID:
    print("–ü–û–ú–ò–õ–ö–ê: CHAT_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
    sys.exit()

logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
diagnostic_router = Router()

# –û–ù–û–í–õ–ï–ù–û: –°—Ç–∞–Ω–∏ –¥–ª—è FSM –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ + —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
class DiagnosticStates(StatesGroup):
    waiting_for_device_type = State()
    waiting_for_problem_category_pc = State()
    waiting_for_screen_symptom_pc = State()
    waiting_for_problem_category_mobile = State()
    waiting_for_mobile_screen_symptom = State()
    waiting_for_other_device_main_category = State()
    waiting_for_problem_category_office = State()
    waiting_for_problem_category_appliance = State()
    waiting_for_problem_category_av = State()
    waiting_for_problem_category_etransport = State()
    # –ù–û–í–Ü –°–¢–ê–ù–ò –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
    waiting_for_name = State()
    waiting_for_phone = State()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ - –±–µ–∑ –∑–º—ñ–Ω
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤—ñ—Å—É"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏")],
    [KeyboardButton(text="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton(text="–©–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ?")],
    [KeyboardButton(text="ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")]
], resize_keyboard=True)

# –¢–µ–∫—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–±–µ–∑ –∑–º—ñ–Ω, –≤–∏–Ω–µ—Å–µ–Ω—ñ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ –∫–æ–¥—É)
REPAIR_SERVICES_TEXT = ("<b>¬´–ö–æ–°–ê-–°–µ—Ä–≤—ñ—Å¬ª ‚Äì –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–≤—ñ—Ç—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π!</b>...")
ADRESY_TEXT = ("<b>–ù–∞—à—ñ —Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ KoSA:</b>...")
KONTAKTY_TEXT = ("<b>–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:</b>...")
GRAFIK_ROBOTY_TEXT = ("<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ü–µ–Ω—Ç—Ä—ñ–≤ KoSA:</b>...")
DIAGNOSTYKA_TEXT = ("üîç <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∏ –≤ KoSA Service...</b>")
keyword_responses = {
    # ... (—Å–ª–æ–≤–Ω–∏–∫ –±–µ–∑ –∑–º—ñ–Ω)
}

# --- –ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ –∑–º—ñ–Ω)
def get_device_type_kb():
    buttons = [
        [InlineKeyboardButton(text="üíª –ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫", callback_data="diag_device_pc")],
        [InlineKeyboardButton(text="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç", callback_data="diag_device_mobile")],
        [InlineKeyboardButton(text="üõ†Ô∏è –Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="diag_device_other_category_selection")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="diag_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ... (—ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó get_*_kb() –±–µ–∑ –∑–º—ñ–Ω) ...
def get_pc_problem_category_kb():
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_pc_screen_symptoms_kb():
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_mobile_problem_category_kb():
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_mobile_screen_symptoms_kb():
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_other_device_main_category_kb():
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_generic_problem_categories_kb(device_category_prefix: str):
    #...
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–ù–û–í–õ–ï–ù–û: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ—Å–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑ –æ–ø—Ü—ñ—î—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
def get_post_diagnostic_kb():
    buttons = [
        [InlineKeyboardButton(text="‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç", callback_data="diag_create_ticket")],
        [InlineKeyboardButton(text="üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data="diag_restart")],
        [InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", callback_data="diag_show_contacts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" (–±–µ–∑ –∑–º—ñ–Ω)
@dp.message(F.text == "ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def start_interactive_diagnostic(message: Message, state: FSMContext):
    # ...

# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ –∑–º—ñ–Ω)
@diagnostic_router.callback_query(F.data == "diag_cancel")
async def cancel_diagnostic_handler(callback: CallbackQuery, state: FSMContext):
    # ...

# ... (—É—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑ –∑–º—ñ–Ω) ...
# @diagnostic_router.callback_query(DiagnosticStates.waiting_for_device_type, ...)
# ...

# –û–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
# –í–æ–Ω–∞ –±—ñ–ª—å—à–µ –Ω–µ —Å–∫–∏–¥–∞—î —Å—Ç–∞–Ω, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
async def show_preliminary_diagnostic_result(callback: CallbackQuery, state: FSMContext, problem_description: str):
    await state.update_data(problem_description=problem_description) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏
    user_data = await state.get_data()
    device_type_choice = user_data.get("device_type_choice", "–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π")

    device_map = {
        "pc": "–ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫",
        "mobile": "–°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç",
        "other_category_selection": "–Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞"
    }
    device_name = device_map.get(device_type_choice, "–ü—Ä–∏—Å—Ç—Ä—ñ–π")

    text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è: {device_name}</b>\n\n"
        f"<b>–ô–º–æ–≤—ñ—Ä–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞:</b>\n{problem_description}\n\n"
        "<b>–©–æ –¥–∞–ª—ñ?</b>\n"
        "–¶–µ –ª–∏—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏—Å–Ω–æ–≤–æ–∫. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ —Ç–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ä–µ–º–æ–Ω—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ.\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ <b>—Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –∑–∞—è–≤–∫—É</b>, —ñ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏, –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–º —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ."
    )
    reply_markup = get_post_diagnostic_kb()
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await callback.answer()


# –û–±—Ä–æ–±–Ω–∏–∫–∏, —â–æ –≤–µ–¥—É—Ç—å –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, —Ç–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_screen_symptom_pc, F.data.startswith("diag_pc_screen_"))
async def pc_screen_symptom_chosen(callback: CallbackQuery, state: FSMContext):
    # ... (–ª–æ–≥—ñ–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏)
    description = symptom_description_map.get(screen_symptom, "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –Ω–∞ –µ–∫—Ä–∞–Ω—ñ.")
    await show_preliminary_diagnostic_result(callback, state, problem_description=description) # –í–∏–∫–ª–∏–∫ –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

# ... (—ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–ª—è –≤–∏–∫–ª–∏–∫—É show_preliminary_diagnostic_result) ...


# --- –ù–û–í–ò–ô –ë–õ–û–ö: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –ø—ñ—Å–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---

@diagnostic_router.callback_query(F.data == "diag_create_ticket")
async def create_ticket_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ß—É–¥–æ–≤–æ! –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É, –≤–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è.")
    await state.set_state(DiagnosticStates.waiting_for_name)
    await callback.answer()

@dp.message(DiagnosticStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–î—è–∫—É—é. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    await state.set_state(DiagnosticStates.waiting_for_phone)

@dp.message(DiagnosticStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(user_phone=message.text)
    user_data = await state.get_data()

    # –§–æ—Ä–º—É—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º—ñ–Ω–∞
    device_type = user_data.get('device_type_choice', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ').replace('_', ' ').capitalize()
    problem_description = user_data.get('problem_description', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
    user_name = user_data.get('user_name', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
    user_phone = user_data.get('user_phone', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')

    ticket_text = (
        f"üö® **–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞** üö®\n\n"
        f"üë§ **–ö–ª—ñ—î–Ω—Ç:** {user_name}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** <code>{user_phone}</code>\n\n"
        f"üíª **–ü—Ä–∏—Å—Ç—Ä—ñ–π:** {device_type}\n"
        f"üîß **–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏ (–∑ –±–æ—Ç–∞):** {problem_description}"
    )

    try:
        await bot.send_message(ADMIN_CHAT_ID, ticket_text)
        await message.answer(
            "‚úÖ **–ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
            "–î—è–∫—É—é! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            "–ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
            reply_markup=main_kb
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É: {e}")
        await message.answer(
            "üò• –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏, –≤–∫–∞–∑–∞–Ω–∏–º–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ö–æ–Ω—Ç–∞–∫—Ç–∏'.",
            reply_markup=main_kb
        )
    finally:
        await state.clear()

# --- –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É ---


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É" (—Ç–µ–ø–µ—Ä —Å–∫–∏–¥–∞—î —Å—Ç–∞–Ω)
@diagnostic_router.callback_query(F.data == "diag_restart")
async def restart_diagnostic_flow(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    # ... (–∫–æ–¥ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏" (—Ç–µ–ø–µ—Ä —Å–∫–∏–¥–∞—î —Å—Ç–∞–Ω)
@diagnostic_router.callback_query(F.data == "diag_show_contacts")
async def show_contacts_from_diag(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(KONTAKTY_TEXT, reply_markup=main_kb)
    await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    await state.clear() # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω, –±–æ –¥—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞


# –ì–æ–ª–æ–≤–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start, /help, —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–±–µ–∑ –∑–º—ñ–Ω)
@dp.message(CommandStart())
async def handle_start(message: Message):
    #...

@dp.message(Command("help"))
async def handle_help(message: Message):
    #...

@dp.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    #...

async def main():
    dp.include_router(diagnostic_router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
