# –î–ª—è —Ä–æ–±–æ—Ç–∏ —Ü—å–æ–≥–æ –∫–æ–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ aiogram.
# –Ø–∫—â–æ —É –≤–∞—Å —ó—ó –Ω–µ–º–∞—î, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —Ç–µ—Ä–º—ñ–Ω–∞–ª (–∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫) —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
# pip install aiogram

import asyncio
import logging
import sys

try:
    from aiogram import Bot, Dispatcher, F, Router
    from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
    from aiogram.enums import ParseMode
    from aiogram.filters import CommandStart, Command
    from aiogram.client.default import DefaultBotProperties
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
except ModuleNotFoundError:
    print("–ü–û–ú–ò–õ–ö–ê: –ù–µ–æ–±—Ö—ñ–¥–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É 'aiogram' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó, –≤—ñ–¥–∫—Ä–∏–≤—à–∏ —Ç–µ—Ä–º—ñ–Ω–∞–ª (–∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫) —Ç–∞ –≤–∏–∫–æ–Ω–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É:")
    print("pip install aiogram")
    print("–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É.")
    sys.exit()

API_TOKEN = '7589770061:AAGRFTtTSi49bipuejyaVB5hPUWLYEJHwGA'

logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher() # –ì–æ–ª–æ–≤–Ω–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä

# –†–æ—É—Ç–µ—Ä –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnostic_router = Router()

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
class DiagnosticStates(StatesGroup):
    waiting_for_device_type = State() # –ö—Ä–æ–∫ 1: –ö–æ–º–ø/–ú–æ–±/–Ü–Ω—à–µ
    waiting_for_problem_category_pc = State() # –ö—Ä–æ–∫ 2 –¥–ª—è –ü–ö
    waiting_for_screen_symptom_pc = State() # –ö—Ä–æ–∫ 3 –¥–ª—è –µ–∫—Ä–∞–Ω—É –ü–ö
    waiting_for_problem_category_mobile = State() # –ö—Ä–æ–∫ 2 –¥–ª—è –ú–æ–±—ñ–ª—å–Ω–∏—Ö
    waiting_for_mobile_screen_symptom = State() # –ó–ú–Ü–ù–ï–ù–û: –ö—Ä–æ–∫ 3 –¥–ª—è –µ–∫—Ä–∞–Ω—É/—Å–µ–Ω—Å–æ—Ä–∞ –ú–æ–±—ñ–ª—å–Ω–∏—Ö
    # TODO: –î–æ–¥–∞—Ç–∏ —Å—Ç–∞–Ω–∏ –¥–ª—è —ñ–Ω—à–∏—Ö —Å–∏–º–ø—Ç–æ–º—ñ–≤ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

    waiting_for_other_device_main_category = State() # –ö—Ä–æ–∫ 2 –¥–ª—è "–Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞" - –≤–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    waiting_for_problem_category_office = State()    # –ö—Ä–æ–∫ 3 –¥–ª—è –û—Ñ—ñ—Å–Ω–æ—ó
    waiting_for_problem_category_appliance = State() # –ö—Ä–æ–∫ 3 –¥–ª—è –ü–æ–±—É—Ç–æ–≤–æ—ó
    waiting_for_problem_category_av = State()        # –ö—Ä–æ–∫ 3 –¥–ª—è –ê—É–¥—ñ–æ/–í—ñ–¥–µ–æ
    waiting_for_problem_category_etransport = State()# –ö—Ä–æ–∫ 3 –¥–ª—è –ï–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
    # TODO: –î–æ–¥–∞—Ç–∏ —Å—Ç–∞–Ω–∏ –¥–ª—è —Å–∏–º–ø—Ç–æ–º—ñ–≤ —Ü–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ


# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ - –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤—ñ—Å—É"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏")],
    [KeyboardButton(text="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton(text="–©–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ?")],
    [KeyboardButton(text="ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")]
], resize_keyboard=True)

# –¢–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ "–©–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ?" - –û–ù–û–í–õ–ï–ù–ò–ô –°–ö–û–†–û–ß–ï–ù–ò–ô –°–ü–ò–°–û–ö
REPAIR_SERVICES_TEXT = (
    "<b>¬´–ö–æ–°–ê-–°–µ—Ä–≤—ñ—Å¬ª ‚Äì –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–≤—ñ—Ç—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π!</b>\n\n"
    "–ú–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –∑–¥—ñ–π—Å–Ω—é—î–º–æ —Ä–µ–º–æ–Ω—Ç —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä—É —Ç–µ—Ö–Ω—ñ–∫–∏. –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—Å, —è–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑:\n\n"
    "<b>–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞ —Ç–∞ –æ—Ñ—ñ—Å–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:</b>\n"
    "‚Ä¢ –ù–æ—É—Ç–±—É–∫–∏ (–≤—Å—ñ—Ö –º–∞—Ä–æ–∫ —Ç–∞ –º–æ–¥–µ–ª–µ–π)\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ñ –±–ª–æ–∫–∏ (–ü–ö, –∫–æ–º–ø'—é—Ç–µ—Ä–∏)\n‚Ä¢ –ú–æ–Ω–æ–±–ª–æ–∫–∏\n‚Ä¢ –ü–ª–∞–Ω—à–µ—Ç–∏\n‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏ (LCD, LED)\n‚Ä¢ –ü—Ä–∏–Ω—Ç–µ—Ä–∏ (–ª–∞–∑–µ—Ä–Ω—ñ)\n‚Ä¢ –ö–æ–ø—ñ—é–≤–∞–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó (–ë–§–ü)\n‚Ä¢ –°–∫–∞–Ω–µ—Ä–∏\n‚Ä¢ –î–∂–µ—Ä–µ–ª–∞ –±–µ–∑–ø–µ—Ä–µ–±—ñ–π–Ω–æ–≥–æ –∂–∏–≤–ª–µ–Ω–Ω—è (–î–ë–ñ/UPS)\n‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ—Ä–∏\n‚Ä¢ –õ–∞–º—ñ–Ω–∞—Ç–æ—Ä–∏\n‚Ä¢ –ü–ª–æ—Ç–µ—Ä–∏\n‚Ä¢ –®—Ä–µ–¥–µ—Ä–∏ (–ó–Ω–∏—â—É–≤–∞—á—ñ –ø–∞–ø–µ—Ä—É)\n\n"
    "<b>–ú–æ–±—ñ–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó:</b>\n"
    "‚Ä¢ –ú–æ–±—ñ–ª—å–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ (—Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏, –∫–Ω–æ–ø–∫–æ–≤—ñ)\n‚Ä¢ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –∫–Ω–∏–≥–∏\n‚Ä¢ GPS-–Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∏\n\n"
    "<b>–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞:</b>\n"
    "‚Ä¢ –ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∏\n‚Ä¢ –ú—ñ–∫—Ä–æ—Ö–≤–∏–ª—å–æ–≤—ñ –ø–µ—á—ñ (–ù–í–ß-–ø–µ—á—ñ)\n‚Ä¢ –ö–∞–≤–æ–º–∞—à–∏–Ω–∏ —Ç–∞ –∫–∞–≤–æ–≤–∞—Ä–∫–∏ (—Ä—ñ–∂–∫–æ–≤—ñ, –∫—Ä–∞–ø–µ–ª—å–Ω—ñ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ)\n‚Ä¢ –ï–ª–µ–∫—Ç—Ä–æ—á–∞–π–Ω–∏–∫–∏\n‚Ä¢ –ü—Ä–∞—Å–∫–∏\n‚Ä¢ –§–µ–Ω–∏ —Ç–∞ —Å—Ç–∞–π–ª–µ—Ä–∏ –¥–ª—è –≤–æ–ª–æ—Å—Å—è\n‚Ä¢ –ü–∏–ª–æ—Å–æ—Å–∏ (–∑–≤–∏—á–∞–π–Ω—ñ, –º–∏—é—á—ñ, —Ä–æ–±–æ—Ç–∏-–ø–∏–ª–æ—Å–æ—Å–∏)\n‚Ä¢ –ë–ª–µ–Ω–¥–µ—Ä–∏ —Ç–∞ –º—ñ–∫—Å–µ—Ä–∏\n‚Ä¢ –ú'—è—Å–æ—Ä—É–±–∫–∏\n‚Ä¢ –¢–æ—Å—Ç–µ—Ä–∏\n‚Ä¢ –û–±—ñ–≥—Ä—ñ–≤–∞—á—ñ (–º–∞—Å–ª—è–Ω—ñ, –∫–æ–Ω–≤–µ–∫—Ç–æ—Ä–Ω—ñ, —ñ–Ω—Ñ—Ä–∞—á–µ—Ä–≤–æ–Ω—ñ)\n‚Ä¢ –ó–≤–æ–ª–æ–∂—É–≤–∞—á—ñ —Ç–∞ –æ—á–∏—â—É–≤–∞—á—ñ –ø–æ–≤—ñ—Ç—Ä—è\n\n"
    "<b>–ê—É–¥—ñ–æ/–í—ñ–¥–µ–æ —Ç–µ—Ö–Ω—ñ–∫–∞ —Ç–∞ –†–æ–∑–≤–∞–≥–∏:</b>\n"
    "‚Ä¢ –¢–µ–ª–µ–≤—ñ–∑–æ—Ä–∏ (LCD, LED, QLED, OLED, Smart TV)\n‚Ä¢ –î–æ–º–∞—à–Ω—ñ –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä–∏ —Ç–∞ —Å–∞—É–Ω–¥–±–∞—Ä–∏\n‚Ä¢ –ú—É–∑–∏—á–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ —Ç–∞ –∞—É–¥—ñ–æ—Å–∏—Å—Ç–µ–º–∏\n‚Ä¢ –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ (Bluetooth-–∫–æ–ª–æ–Ω–∫–∏)\n‚Ä¢ –ù–∞–≤—É—à–Ω–∏–∫–∏ (–¥—Ä–æ—Ç–æ–≤—ñ —Ç–∞ –±–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ)\n‚Ä¢ –Ü–≥—Ä–æ–≤—ñ –∫–æ–Ω—Å–æ–ª—ñ (PlayStation, Xbox)\n\n"
    "<b>–ï–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–¥—Ä—ñ–±–Ω–∏–π):</b>\n"
    "‚Ä¢ –ï–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∏\n‚Ä¢ –ï–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–∏\n‚Ä¢ –ì—ñ—Ä–æ–±–æ—Ä–¥–∏ —Ç–∞ –≥—ñ—Ä–æ—Å–∫—É—Ç–µ—Ä–∏\n\n"
    "–¢–∞–∫–æ–∂ —É –Ω–∞—à–æ–º—É –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ—é —Ç–µ—Ö–Ω—ñ–∫–æ—é: –∑–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó, –∫–∞–±–µ–ª—ñ, –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∏, –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –º–∏—à—ñ, –∫–∏–ª–∏–º–∫–∏, –Ω–∞–≤—É—à–Ω–∏–∫–∏, –∫–æ–ª–æ–Ω–∫–∏, –∞–¥–∞–ø—Ç–µ—Ä–∏, –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–∫–∏, –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤, —Ç–æ–Ω–µ—Ä–∏, —á–æ—Ö–ª–∏, –∑–∞—Ö–∏—Å–Ω–µ —Å–∫–ª–æ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤.\n\n"
    "<i>–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Å–≤–æ—é —Ç–µ—Ö–Ω—ñ–∫—É —É —Å–ø–∏—Å–∫—É ‚Äì –Ω–µ –±—ñ–¥–∞! –ó–∞–ø–∏—Ç–∞–π—Ç–µ —É –Ω–∞—Å, –º–æ–∂–ª–∏–≤–æ, –º–∏ –∑–º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏!</i>\n"
    "<i>–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó! –ú–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ —Ç–µ—Ö–Ω—ñ–∫—É, –∞ –π –ø—ñ–¥–≤–∏—â—É—î–º–æ —ó—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!</i> üòâ"
)

# –°–ª–æ–≤–Ω–∏–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (—Ç–µ–∫—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤–∏–Ω–µ—Å–µ–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
ADRESY_TEXT = (
    "<b>–ù–∞—à—ñ —Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ KoSA:</b>\n\n"
    "<b>–º. –ë—É—á–∞:</b>\n"
    "üìç –í—É–ª. –†—É–¥–µ–Ω–∫–æ, 2 (–í—Ö—ñ–¥ –∑ –±—É–ª—å–≤–∞—Ä—É –ë. –•–º–µ–ª—å–Ω–∏—Ü—å–∫–æ–≥–æ)\n"
    "üïí –ì—Ä–∞—Ñ—ñ–∫: –ü–Ω‚Äì–ü—Ç: 09:00‚Äì18:00, –°–±: 10:00‚Äì16:00\n\n"
    "<b>–º. –Ü—Ä–ø—ñ–Ω—å:</b>\n"
    "üìç –í—É–ª. –°–æ–±–æ—Ä–Ω–∞, 103 (–ó–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º \"–†–æ—à–µ–Ω\" –ª—ñ–≤–æ—Ä—É—á)\n"
    "üïí –ì—Ä–∞—Ñ—ñ–∫: –ü–Ω‚Äì–ü—Ç: 09:00‚Äì18:00\n\n"
    "<b>—Å–º—Ç. –ì–æ—Å—Ç–æ–º–µ–ª—å:</b>\n"
    "üìç –í—É–ª. –°–≤—è—Ç–æ-–ü–æ–∫—Ä–æ–≤—Å—å–∫–∞, 108-–ë (–ù–∞ —Ä–∏–Ω–∫—É)\n"
    "üïí –ì—Ä–∞—Ñ—ñ–∫: –í—Ç‚Äì–ü—Ç: 09:00‚Äì18:00, –°–±: 10:00‚Äì16:00\n\n"
    "<i>–û–±–∏—Ä–∞–π –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ç–∞ –ø—Ä–∏–Ω–æ—Å—å —Å–≤–æ—é —Ç–µ—Ö–Ω—ñ–∫—É!</i> üòâ"
)
KONTAKTY_TEXT = (
    "<b>–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n"
    "üìû <code>+380443338648</code> (–ë–∞–≥–∞—Ç–æ–∫–∞–Ω–∞–ª—å–Ω–∏–π)\n"
    "üìû <code>+380635342228</code> (LifeCell)\n"
    "üìû <code>+380961090110</code> (Kyivstar)\n"
    "üìû <code>+380951053838</code> (Vodafone/MTS)\n\n"
    "<i>–î–∑–≤–æ–Ω–∏, —è–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è!</i>"
)
GRAFIK_ROBOTY_TEXT = (
    "<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ü–µ–Ω—Ç—Ä—ñ–≤ KoSA:</b>\n\n"
    "<b>–º. –ë—É—á–∞</b> (–í—É–ª. –†—É–¥–µ–Ω–∫–æ, 2):\n"
    "üïí –ü–Ω‚Äì–ü—Ç: 09:00‚Äì18:00\nüïí –°–±: 10:00‚Äì16:00\n\n"
    "<b>–º. –Ü—Ä–ø—ñ–Ω—å</b> (–í—É–ª. –°–æ–±–æ—Ä–Ω–∞, 103):\n"
    "üïí –ü–Ω‚Äì–ü—Ç: 09:00‚Äì18:00\n\n"
    "<b>—Å–º—Ç. –ì–æ—Å—Ç–æ–º–µ–ª—å</b> (–í—É–ª. –°–≤—è—Ç–æ-–ü–æ–∫—Ä–æ–≤—Å—å–∫–∞, 108-–ë):\n"
    "üïí –í—Ç‚Äì–ü—Ç: 09:00‚Äì18:00\nüïí –°–±: 10:00‚Äì16:00\n\n"
    "<i>–ß–µ–∫–∞—î–º–æ –Ω–∞ —Ç–µ–±–µ!</i>"
)
DIAGNOSTYKA_TEXT = (
    "üîç <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∏ –≤ KoSA Service ‚Äì —Ü–µ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ –ø–æ—Ä—è—Ç—É–Ω–∫—É —Ç–≤–æ–≥–æ –≥–∞–¥–∂–µ—Ç–∞!</b>\n\n"
    "<b>–©–æ –º–∏ —Ä–æ–±–∏–º–æ –ø—ñ–¥ —á–∞—Å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</b>\n"
    "üëÄ –û–≥–ª—è–¥–∞—î–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –Ω–∞ –≤–∏–¥–∏–º—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è.\n‚öôÔ∏è –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó.\nüíª –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ).\nüéØ –¢–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ.\n\n"
    "<b>–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ü–µ –∑–∞–π–º–∞—î?</b>\n"
    "–ó–∞–∑–≤–∏—á–∞–π, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∏–≤–∞—î –≤—ñ–¥ 1 –¥–æ 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ–±–ª–µ–º–∏. –Ü–Ω–æ–¥—ñ, –¥–ª—è \"–ø–ª–∞–≤–∞—é—á–∏—Ö\" –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –±—ñ–ª—å—à–µ —á–∞—Å—É.\n"
    "–ü—ñ—Å–ª—è —á–æ–≥–æ –ø–æ–≥–æ–¥–∂—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç—É.\n\n"
    "<b>–©–æ–¥–æ –æ–ø–ª–∞—Ç–∏:</b>\n"
    "‚úÖ <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞</b>, —è–∫—â–æ —Ç–∏ –∑–∞–ª–∏—à–∞—î—à —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞ –ø–æ–¥–∞–ª—å—à–∏–π —Ä–µ–º–æ–Ω—Ç —É –Ω–∞—Å.\n"
    "‚ö†Ô∏è –£ –≤–∏–ø–∞–¥–∫—É –≤—ñ–¥–º–æ–≤–∏ –≤—ñ–¥ –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–º–æ–Ω—Ç—É –ø—ñ—Å–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞—î <b>450 –≥—Ä–Ω</b>.\n\n"
    "<b>–©–æ –±—Ä–∞—Ç–∏ –∑ —Å–æ–±–æ—é?</b>\n"
    "–ë–∞–∂–∞–Ω–æ –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å–∞–º –ø—Ä–∏—Å—Ç—Ä—ñ–π —Ç–∞ –π–æ–≥–æ –∑–∞—Ä—è–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π (–æ—Å–æ–±–ª–∏–≤–æ –¥–ª—è –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É). –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ –ø—Ä–∞—Ü—é—î –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∞–∫—Å–µ—Å—É–∞—Ä–æ–º), –≤—ñ–∑—å–º–∏ —ñ –π–æ–≥–æ.\n\n"
    "<i>–ù–µ –≥–∞–¥–∞–π, —â–æ –∑–ª–∞–º–∞–ª–æ—Å—è ‚Äì –¥–æ–≤—ñ—Ä—Å—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∞–º KoSA Service! –ú–∏ –∑–Ω–∞–π–¥–µ–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–±–ª–µ–º–∏.</i> üòâ"
)

keyword_responses = {
    "—Ä–µ–º–æ–Ω—Ç –ø–∫": "üîß –ó–∞–π–º–∞—î–º–æ—Å—å —Ä–µ–º–æ–Ω—Ç–æ–º –ü–ö. –©–æ—Å—å —Ç—Ä—ñ—â–∏—Ç—å, –Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è, –ø–µ—Ä–µ–≥—Ä—ñ–≤–∞—î—Ç—å—Å—è ‚Äî –Ω–µ—Å–∏, –ø–æ–¥–∏–≤–∏–º–æ—Å—å.",
    "–∫–æ–º–ø'—é—Ç–µ—Ä": "üß† –ö–æ–º–ø–∏ ‚Äî –Ω–∞—à–µ —Ö–æ–±—ñ. –©–æ –∑ –Ω–∏–º —Å—Ç–∞–ª–æ—Å—è? –ú–æ–∂–µ–º–æ –∞–ø–≥—Ä–µ–π–¥–∏—Ç–∏, –ø–æ—á–∏—Å—Ç–∏—Ç–∏, –∞–±–æ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç–∏ –∑ –º–µ—Ä—Ç–≤–∏—Ö.",
    "–Ω–æ—É—Ç": "üíª –†–µ–º–æ–Ω—Ç—É—î–º–æ –Ω–æ—É—Ç–±—É–∫–∏: —Ç—Ä—ñ—â–∏–Ω–∏, –∑–∞–ª–∏—Ç—Ç—è, –≥–ª—é–∫–∏ Windows ‚Äî —É—Å–µ —Ñ—ñ–∫—Å–∏–º–æ. –ù–∞–ø–∏—à–∏, —â–æ —Å–∞–º–µ —Ç—Ä–∞–ø–∏–ª–æ—Å—å.",
    "–µ–∫—Ä–∞–Ω": "üñ•Ô∏è –Ø–∫—â–æ –µ–∫—Ä–∞–Ω —Ç–µ–º–Ω–∏–π, —Ç—Ä—ñ—Å–Ω—É–≤, –∞–±–æ –≤–∏–¥–Ω–æ —Ç—ñ–ª—å–∫–∏ —Å–ø–æ–≥–∞–¥–∏ –ø—Ä–æ –º–∏–Ω—É–ª–µ ‚Äî —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ, –ø—ñ–¥ –∑–∞–º—ñ–Ω—É.",
    "—Ç–µ–ª–µ—Ñ–æ–Ω": "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏ –ª–∞–≥–æ–¥–∏–º–æ. –ï–∫—Ä–∞–Ω, –±–∞—Ç–∞—Ä–µ—è, –∑–∞—Ä—è–¥–∫–∞ ‚Äî –ø–∏—à–∏, —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
    "–∑–∞—Ä—è–¥–∫–∞": "üîå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞—Ä—è–¥–∫–æ—é? –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–æ–∑'—î–º, —à–Ω—É—Ä –∞–±–æ —Å–∞–º–∞ –ø–ª–∞—Ç–∞. –ü—Ä–∏–Ω–æ—Å—å ‚Äî –ø—ñ–¥–∫–∏–Ω–µ–º –Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É.",
    "–Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è": "üòµ –ù–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è? –Ñ —à–∞–Ω—Å, —â–æ –Ω–µ –≤—Å–µ –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü—Ä–∏–Ω–µ—Å–∏ ‚Äî —Ä–æ–∑–±–µ—Ä–µ–º–æ.",
    "–∞–¥—Ä–µ—Å–∞": ADRESY_TEXT,
    "–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤—ñ—Å—É": ADRESY_TEXT,
    "–∞–¥—Ä–µ—Å–∏": ADRESY_TEXT,
    "–¥–µ –∑–Ω–∞–π—Ç–∏": ADRESY_TEXT,
    "–≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏": GRAFIK_ROBOTY_TEXT,
    "–≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏": GRAFIK_ROBOTY_TEXT,
    "–∫–æ–Ω—Ç–∞–∫—Ç–∏": KONTAKTY_TEXT,
    "–≥–∞—Ä–∞–Ω—Ç—ñ—è": "üõ°Ô∏è –î–∞—î–º–æ –≥–∞—Ä–∞–Ω—Ç—ñ—é –Ω–∞ –≤—Å–µ, —â–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ. –ê–ª–µ —è–∫—â–æ —Ä–æ–∑–±–∏—Ä–∞–ª–∏ –≤–¥–æ–º–∞ ‚Äî —Ç–æ —Ç—ñ–ª—å–∫–∏ —Ö—Ä–µ—Å—Ç–∏–∫ –Ω–∞ —É–¥–∞—á—É.",
    "–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞": DIAGNOSTYKA_TEXT,
    "—â–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ?": REPAIR_SERVICES_TEXT,
    "—â–æ —Ä–µ–º–æ–Ω—Ç—É—î—Ç–µ": REPAIR_SERVICES_TEXT,
    "–≤–∏–¥–∏ —Ç–µ—Ö–Ω—ñ–∫–∏": REPAIR_SERVICES_TEXT,
}

# --- –ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def get_device_type_kb(): # –ö—Ä–æ–∫ 1
    buttons = [
        [InlineKeyboardButton(text="üíª –ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫", callback_data="diag_device_pc")],
        [InlineKeyboardButton(text="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç", callback_data="diag_device_mobile")],
        [InlineKeyboardButton(text="üõ†Ô∏è –Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="diag_device_other_category_selection")], # –í–µ–¥–µ –¥–æ –≤–∏–±–æ—Ä—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="diag_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫ ---
def get_pc_problem_category_kb(): # –ö—Ä–æ–∫ 2 –¥–ª—è –ü–ö
    buttons = [
        [InlineKeyboardButton(text="‚ö° –ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤–∫–ª—é—á–µ–Ω–Ω—è–º", callback_data="diag_pc_cat_power")],
        [InlineKeyboardButton(text="üê¢ –ù–∏–∑—å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="diag_pc_cat_performance")],
        [InlineKeyboardButton(text="üñ•Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º", callback_data="diag_pc_cat_screen")],
        [InlineKeyboardButton(text="üîä –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–≤—É–∫–æ–º", callback_data="diag_pc_cat_sound")],
        [InlineKeyboardButton(text="üî• –ü–µ—Ä–µ–≥—Ä—ñ–≤", callback_data="diag_pc_cat_overheat")],
        [InlineKeyboardButton(text="üåê –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º", callback_data="diag_pc_cat_internet")],
        [InlineKeyboardButton(text="‚å®Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é/—Ç–∞—á–ø–∞–¥–æ–º", callback_data="diag_pc_cat_input")],
        [InlineKeyboardButton(text="üíæ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏—Å–∫–æ–º/–ø–∞–º'—è—Ç—Ç—é", callback_data="diag_pc_cat_storage")],
        [InlineKeyboardButton(text="‚öôÔ∏è –Ü–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –ü–ö", callback_data="diag_pc_cat_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é)", callback_data="diag_back_to_device_choice")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_pc_screen_symptoms_kb(): # –ö—Ä–æ–∫ 3 –¥–ª—è –µ–∫—Ä–∞–Ω—É –ü–ö
    buttons = [
        [InlineKeyboardButton(text="–ï–∫—Ä–∞–Ω –Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è", callback_data="diag_pc_screen_no_power")],
        [InlineKeyboardButton(text="–ï–∫—Ä–∞–Ω –º–µ—Ä–µ—Ö—Ç–∏—Ç—å", callback_data="diag_pc_screen_flicker")],
        [InlineKeyboardButton(text="–ù–∞ –µ–∫—Ä–∞–Ω—ñ —Å–º—É–≥–∏/–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏", callback_data="diag_pc_screen_artifacts")], # –£—Ç–æ—á–Ω–µ–Ω–æ
        [InlineKeyboardButton(text="–ï–∫—Ä–∞–Ω —Ñ—ñ–∑–∏—á–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π", callback_data="diag_pc_screen_damaged")],
        [InlineKeyboardButton(text="–î—É–∂–µ —Ç—å–º—è–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data="diag_pc_screen_dim")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –ø—Ä–æ–±–ª–µ–º–∏ –ü–ö)", callback_data="diag_back_to_pc_category")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç ---
def get_mobile_problem_category_kb(): # –ö—Ä–æ–∫ 2 –¥–ª—è –ú–æ–±—ñ–ª—å–Ω–∏—Ö
    buttons = [
        [InlineKeyboardButton(text="üîã –ù–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è / –ù–µ –∑–∞—Ä—è–¥–∂–∞—î—Ç—å—Å—è", callback_data="diag_mob_cat_power")],
        [InlineKeyboardButton(text="üì± –ü—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º/—Å–µ–Ω—Å–æ—Ä–æ–º", callback_data="diag_mob_cat_screen")],
        [InlineKeyboardButton(text="üîä –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–≤—É–∫–æ–º (–¥–∏–Ω–∞–º—ñ–∫/–º—ñ–∫—Ä–æ—Ñ–æ–Ω)", callback_data="diag_mob_cat_sound")],
        [InlineKeyboardButton(text="üì∏ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–∞–º–µ—Ä–æ—é", callback_data="diag_mob_cat_camera")],
        [InlineKeyboardButton(text="‚è≥ –®–≤–∏–¥–∫–æ —Ä–æ–∑—Ä—è–¥–∂–∞—î—Ç—å—Å—è / –ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞—Ç–∞—Ä–µ—î—é", callback_data="diag_mob_cat_battery")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ü–ó / –ó–∞–≤–∏—Å–∞—î / –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è", callback_data="diag_mob_cat_software")],
        [InlineKeyboardButton(text="üíß –ü–æ—Ç—Ä–∞–ø–∏–ª–∞ –≤–æ–¥–∞ / –§—ñ–∑–∏—á–Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è", callback_data="diag_mob_cat_damage")],
        [InlineKeyboardButton(text="üåê –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é/Wi-Fi/Bluetooth", callback_data="diag_mob_cat_connectivity")],
        [InlineKeyboardButton(text="üîß –Ü–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –º–æ–±—ñ–ª—å–Ω–∏–º", callback_data="diag_mob_cat_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é)", callback_data="diag_back_to_device_choice")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ù–û–í–ò–ô –ö–û–î: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∏–º–ø—Ç–æ–º—ñ–≤ –µ–∫—Ä–∞–Ω—É –º–æ–±—ñ–ª—å–Ω–æ–≥–æ
def get_mobile_screen_symptoms_kb(): # –ö—Ä–æ–∫ 3 –¥–ª—è –µ–∫—Ä–∞–Ω—É/—Å–µ–Ω—Å–æ—Ä–∞ –ú–æ–±—ñ–ª—å–Ω–∏—Ö
    buttons = [
        [InlineKeyboardButton(text="–ï–∫—Ä–∞–Ω –Ω–µ —Ä–µ–∞–≥—É—î –Ω–∞ –¥–æ—Ç–∏–∫–∏", callback_data="diag_mob_screen_no_touch")],
        [InlineKeyboardButton(text="–°–º—É–≥–∏ / –ø–ª—è–º–∏ / –±–∏—Ç—ñ –ø—ñ–∫—Å–µ–ª—ñ", callback_data="diag_mob_screen_artifacts")],
        [InlineKeyboardButton(text="–ï–∫—Ä–∞–Ω —Ç—Ä—ñ—Å–Ω—É—Ç–∏–π / –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π", callback_data="diag_mob_screen_damaged")],
        [InlineKeyboardButton(text="–ß–æ—Ä–Ω–∏–π –µ–∫—Ä–∞–Ω (–Ω–µ —Å–≤—ñ—Ç–∏—Ç—å—Å—è)", callback_data="diag_mob_screen_no_light")],
        [InlineKeyboardButton(text="–ú–µ—Ä–µ—Ö—Ç–∏—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data="diag_mob_screen_flicker")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –ø—Ä–æ–±–ª–µ–º–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ)", callback_data="diag_back_to_mobile_category")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
# –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–ì–û –ö–û–î–£

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è "–Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞" ---
def get_other_device_main_category_kb(): # –ö—Ä–æ–∫ 2 –¥–ª—è "–Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞"
    buttons = [
        [InlineKeyboardButton(text="üì† –û—Ñ—ñ—Å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="diag_other_maincat_office")],
        [InlineKeyboardButton(text="üç≥ –ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", callback_data="diag_other_maincat_appliance")],
        [InlineKeyboardButton(text="üì∫ –ê—É–¥—ñ–æ/–í—ñ–¥–µ–æ —Ç–∞ –†–æ–∑–≤–∞–≥–∏", callback_data="diag_other_maincat_av")],
        [InlineKeyboardButton(text="üõ¥ –ï–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="diag_other_maincat_etransport")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é)", callback_data="diag_back_to_device_choice")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_generic_problem_categories_kb(device_category_prefix: str): # –ö—Ä–æ–∫ 3 –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π "–Ü–Ω—à–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏"
    buttons = [
        [InlineKeyboardButton(text="‚ö° –ù–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è", callback_data=f"diag_{device_category_prefix}_problem_no_power")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ù–µ –ø—Ä–∞—Ü—é—î –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º", callback_data=f"diag_{device_category_prefix}_problem_malfunction")],
        [InlineKeyboardButton(text="üîä –î–∏–≤–Ω—ñ –∑–≤—É–∫–∏ / –∑–∞–ø–∞—Ö–∏", callback_data=f"diag_{device_category_prefix}_problem_noise_smell")],
        [InlineKeyboardButton(text="üõ†Ô∏è –ú–µ—Ö–∞–Ω—ñ—á–Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è", callback_data=f"diag_{device_category_prefix}_problem_damage")],
        [InlineKeyboardButton(text="‚ùì –Ü–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞", callback_data=f"diag_{device_category_prefix}_problem_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ–Ω. —Ç–µ—Ö–Ω—ñ–∫–∏)", callback_data="diag_back_to_other_main_category_selection")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_final_diagnostic_kb():
    buttons = [
        [InlineKeyboardButton(text="üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data="diag_restart")],
        [InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", callback_data="diag_show_contacts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
@dp.message(F.text == "ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def start_interactive_diagnostic(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º</b>\n"
        "–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—É –ø—Ä–æ–±–ª–µ–º—É –∑ –≤–∞—à–∏–º –ø—Ä–∏—Å—Ç—Ä–æ—î–º.\n\n"
        "<b>–ö—Ä–æ–∫ 1: –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é</b>",
        reply_markup=get_device_type_kb()
    )
    await state.set_state(DiagnosticStates.waiting_for_device_type)

# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@diagnostic_router.callback_query(F.data == "diag_cancel")
async def cancel_diagnostic_handler(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.", show_alert=True)
        try:
            await callback.message.delete()
        except Exception:
            pass
        return
    await state.clear()
    await callback.message.edit_text("–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ß–∏–º —â–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=None)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø—Ä–∏—Å—Ç—Ä–æ—é (–ö—Ä–æ–∫ 1)
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_device_type, F.data.startswith("diag_device_"))
async def device_type_chosen(callback: CallbackQuery, state: FSMContext):
    device_choice = callback.data.split("diag_device_")[-1]
    await state.update_data(device_type_choice=device_choice)

    if device_choice == "pc":
        await callback.message.edit_text(
            "<b>–ö—Ä–æ–∫ 2: –Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î (–ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫)?</b>",
            reply_markup=get_pc_problem_category_kb()
        )
        await state.set_state(DiagnosticStates.waiting_for_problem_category_pc)
    elif device_choice == "mobile":
        await callback.message.edit_text(
            "<b>–ö—Ä–æ–∫ 2: –Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î (–°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç)?</b>",
            reply_markup=get_mobile_problem_category_kb()
        )
        await state.set_state(DiagnosticStates.waiting_for_problem_category_mobile)
    elif device_choice == "other_category_selection":
        await callback.message.edit_text(
            "<b>–ö—Ä–æ–∫ 2: –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞—à–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏</b>",
            reply_markup=get_other_device_main_category_kb()
        )
        await state.set_state(DiagnosticStates.waiting_for_other_device_main_category)
    await callback.answer()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (—É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–æ–≥–æ)
async def show_diagnostic_result(message_or_callback: Message | CallbackQuery, state: FSMContext, problem_description: str = "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ."):
    user_data = await state.get_data()
    device_type_choice = user_data.get("device_type_choice", "–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π")

    text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π) –¥–ª—è: {device_type_choice.replace('_', ' ').capitalize()}</b>\n\n"
        f"<b>–ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞:</b>\n{problem_description}\n\n"
        "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É KoSA –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞ —Ä–µ–º–æ–Ω—Ç—É –≤–∞—à–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.\n\n" +
        ADRESY_TEXT
    )
    reply_markup = get_final_diagnostic_kb()

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=reply_markup)
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=reply_markup)

    await state.clear()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫ ---
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_pc, F.data.startswith("diag_pc_cat_"))
async def pc_problem_category_chosen(callback: CallbackQuery, state: FSMContext):
    problem_category = callback.data.split("diag_pc_cat_")[-1]
    await state.update_data(pc_problem_category=problem_category)

    if problem_category == "screen":
        await callback.message.edit_text(
            "<b>–ö—Ä–æ–∫ 3: –£—Ç–æ—á–Ω—ñ—Ç—å —Å–∏–º–ø—Ç–æ–º–∏ (–ü—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º –ü–ö)</b>",
            reply_markup=get_pc_screen_symptoms_kb()
        )
        await state.set_state(DiagnosticStates.waiting_for_screen_symptom_pc)
    else:
        problem_description_map = {
            "power": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∂–∏–≤–ª–µ–Ω–Ω—è–º –∞–±–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞ —Å—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º–∏.",
            "performance": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º, –∂–æ—Ä—Å—Ç–∫–∏–º –¥–∏—Å–∫–æ–º, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—é –ø–∞–º'—è—Ç—Ç—é –∞–±–æ –ø–µ—Ä–µ–≥—Ä—ñ–≤–æ–º.",
            "sound": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∞—É–¥—ñ–æ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏, –¥–∏–Ω–∞–º—ñ–∫–∞–º–∏ –∞–±–æ –∑–≤—É–∫–æ–≤–æ—é –∫–∞—Ä—Ç–æ—é.",
            "overheat": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ —Å–∏—Å—Ç–µ–º–æ—é –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è, —Ç–µ—Ä–º–æ–ø–∞—Å—Ç–æ—é –∞–±–æ –Ω–∞–¥–º—ñ—Ä–Ω–∏–º –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º.",
            "internet": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ–≤–æ—é –∫–∞—Ä—Ç–æ—é, –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∞–±–æ Wi-Fi –º–æ–¥—É–ª–µ–º.",
            "input": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é, —Ç–∞—á–ø–∞–¥–æ–º, —ó—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –∞–±–æ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏.",
            "storage": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∂–æ—Ä—Å—Ç–∫–∏–º –¥–∏—Å–∫–æ–º (HDD/SSD) –∞–±–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—é –ø–∞–º'—è—Ç—Ç—é.",
            "other": "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏."
        }
        description = problem_description_map.get(problem_category, "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
        await show_diagnostic_result(callback, state, problem_description=description)
    await callback.answer()

@diagnostic_router.callback_query(DiagnosticStates.waiting_for_screen_symptom_pc, F.data.startswith("diag_pc_screen_"))
async def pc_screen_symptom_chosen(callback: CallbackQuery, state: FSMContext):
    screen_symptom = callback.data.split("diag_pc_screen_")[-1]
    await state.update_data(pc_screen_symptom=screen_symptom)

    symptom_description_map = {
        "no_power": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –º–∞—Ç—Ä–∏—Ü–µ—é, —à–ª–µ–π—Ñ–æ–º, –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–æ—é –∞–±–æ –∂–∏–≤–ª–µ–Ω–Ω—è–º –µ–∫—Ä–∞–Ω—É.",
        "flicker": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —à–ª–µ–π—Ñ–æ–º –º–∞—Ç—Ä–∏—Ü—ñ, –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–æ—é –∞–±–æ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏.",
        "artifacts": "–ß–∞—Å—Ç–æ –≤–∫–∞–∑—É—î –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç–æ—é –∞–±–æ —ó—ó –ø–∞–º'—è—Ç—Ç—é, —Ä—ñ–¥—à–µ - —à–ª–µ–π—Ñ–æ–º.",
        "damaged": "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∑–∞–º—ñ–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ñ –µ–∫—Ä–∞–Ω—É.",
        "dim": "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é –º–∞—Ç—Ä–∏—Ü—ñ –∞–±–æ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–æ–º."
    }
    description = symptom_description_map.get(screen_symptom, "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –Ω–∞ –µ–∫—Ä–∞–Ω—ñ.")
    await show_diagnostic_result(callback, state, problem_description=description)
    await callback.answer()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç ---
# –ó–ú–Ü–ù–ï–ù–û: –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–±–ª–µ–º–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_mobile, F.data.startswith("diag_mob_cat_"))
async def mobile_problem_category_chosen(callback: CallbackQuery, state: FSMContext):
    problem_category = callback.data.split("diag_mob_cat_")[-1]
    await state.update_data(mobile_problem_category=problem_category)

    if problem_category == "screen": # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º
        await callback.message.edit_text(
            "<b>–ö—Ä–æ–∫ 3: –£—Ç–æ—á–Ω—ñ—Ç—å —Å–∏–º–ø—Ç–æ–º–∏ (–ü—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º/—Å–µ–Ω—Å–æ—Ä–æ–º –º–æ–±—ñ–ª—å–Ω–æ–≥–æ)</b>",
            reply_markup=get_mobile_screen_symptoms_kb() # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        )
        await state.set_state(DiagnosticStates.waiting_for_mobile_screen_symptom) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    else:
        # –î–ª—è —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–±–ª–µ–º –º–æ–±—ñ–ª—å–Ω–∏—Ö - –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ª–æ–≥—ñ–∫—É
        problem_description_map = {
            "power": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞—Ç–∞—Ä–µ—î—é, —Ä–æ–∑'—î–º–æ–º –∑–∞—Ä—è–¥–∫–∏, –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º –∂–∏–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–±–æ—î–º.",
            # "screen": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏—Å–ø–ª–µ—î–º, —Ç–∞—á—Å–∫—Ä—ñ–Ω–æ–º, —à–ª–µ–π—Ñ–æ–º –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º.", # –í–∏–¥–∞–ª–µ–Ω–æ, –±–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
            "sound": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏–Ω–∞–º—ñ–∫–æ–º, –º—ñ–∫—Ä–æ—Ñ–æ–Ω–æ–º, –∞—É–¥—ñ–æ–∫–æ–¥–µ–∫–æ–º –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º.",
            "camera": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–¥—É–ª–µ–º –∫–∞–º–µ—Ä–∏, —à–ª–µ–π—Ñ–æ–º –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º.",
            "battery": "–ó–Ω–æ—Å –±–∞—Ç–∞—Ä–µ—ó, –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º –∑–∞—Ä—è–¥—É –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º.",
            "software": "–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ –∑–±–æ—ó, –≤—ñ—Ä—É—Å–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∏.",
            "damage": "–ú–µ—Ö–∞–Ω—ñ—á–Ω—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–ø—É—Å—É, –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∞–±–æ –ø–æ—Ç—Ä–∞–ø–ª—è–Ω–Ω—è —Ä—ñ–¥–∏–Ω–∏.",
            "connectivity": "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∞–Ω—Ç–µ–Ω–æ—é, –º–æ–¥—É–ª—è–º–∏ Wi-Fi/Bluetooth/GSM –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º.",
            "other": "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó –ø—Ä–æ–±–ª–µ–º–∏."
        }
        description = problem_description_map.get(problem_category, "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
        await show_diagnostic_result(callback, state, problem_description=description)
    await callback.answer()
# –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù

# –ù–û–í–ò–ô –ö–û–î: –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Å–∏–º–ø—Ç–æ–º—É –ø—Ä–æ–±–ª–µ–º–∏ –∑ –µ–∫—Ä–∞–Ω–æ–º –º–æ–±—ñ–ª—å–Ω–æ–≥–æ
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_mobile_screen_symptom, F.data.startswith("diag_mob_screen_"))
async def mobile_screen_symptom_chosen(callback: CallbackQuery, state: FSMContext):
    screen_symptom = callback.data.split("diag_mob_screen_")[-1]
    await state.update_data(mobile_screen_symptom=screen_symptom)

    symptom_description_map = {
        "no_touch": "–ü—Ä–æ–±–ª–µ–º–∞, –π–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ —Ç–∞—á—Å–∫—Ä—ñ–Ω–æ–º (—Å–µ–Ω—Å–æ—Ä–Ω–æ—é –ø–∞–Ω–µ–ª–ª—é) –∞–±–æ –π–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º. –ú–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –∑–∞–º—ñ–Ω–∞ –¥–∏—Å–ø–ª–µ–π–Ω–æ–≥–æ –º–æ–¥—É–ª—è.",
        "artifacts": "–°–º—É–≥–∏, –ø–ª—è–º–∏ –∞–±–æ –±–∏—Ç—ñ –ø—ñ–∫—Å–µ–ª—ñ —á–∞—Å—Ç–æ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –Ω–µ—Å–ø—Ä–∞–≤–Ω—ñ—Å—Ç—å —Å–∞–º–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ –¥–∏—Å–ø–ª–µ—è –∞–±–æ —à–ª–µ–π—Ñ—É.",
        "damaged": "–§—ñ–∑–∏—á–Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É (—Ç—Ä—ñ—â–∏–Ω–∏, —Å–∫–æ–ª–∏) –∑–∞–∑–≤–∏—á–∞–π –≤–∏–º–∞–≥–∞—î –∑–∞–º—ñ–Ω–∏ –¥–∏—Å–ø–ª–µ–π–Ω–æ–≥–æ –º–æ–¥—É–ª—è.",
        "no_light": "–Ø–∫—â–æ –µ–∫—Ä–∞–Ω –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —á–æ—Ä–Ω–∏–º, –∞–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–µ–∞–≥—É—î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —î –∑–≤—É–∫), –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤ –ø—ñ–¥—Å–≤—ñ—Ç—Ü—ñ –¥–∏—Å–ø–ª–µ—è, —à–ª–µ–π—Ñ—ñ –∞–±–æ —Å–∞–º–æ–º—É –¥–∏—Å–ø–ª–µ—ó.",
        "flicker": "–ú–µ—Ä–µ—Ö—Ç—ñ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ —Å–ø—Ä–∏—á–∏–Ω–µ–Ω–µ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∑—ñ —à–ª–µ–π—Ñ–æ–º, –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–±–æ—î–º –∞–±–æ –Ω–µ—Å–ø—Ä–∞–≤–Ω—ñ—Å—Ç—é –¥–∏—Å–ø–ª–µ—è."
    }
    description = symptom_description_map.get(screen_symptom, "–ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∞–±–æ —Å–µ–Ω—Å–æ—Ä–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó.")
    await show_diagnostic_result(callback, state, problem_description=description)
    await callback.answer()
# –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–ì–û –ö–û–î–£

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è "–Ü–Ω—à–∞ —Ç–µ—Ö–Ω—ñ–∫–∞" ---
@diagnostic_router.callback_query(DiagnosticStates.waiting_for_other_device_main_category, F.data.startswith("diag_other_maincat_"))
async def other_main_category_chosen(callback: CallbackQuery, state: FSMContext):
    main_category = callback.data.split("diag_other_maincat_")[-1]
    await state.update_data(other_main_category=main_category)

    category_name_map = {
        "office": "–û—Ñ—ñ—Å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞",
        "appliance": "–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞",
        "av": "–ê—É–¥—ñ–æ/–í—ñ–¥–µ–æ —Ç–∞ –†–æ–∑–≤–∞–≥–∏",
        "etransport": "–ï–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    }
    category_name = category_name_map.get(main_category, "–û–±—Ä–∞–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞")

    await callback.message.edit_text(
        f"<b>–ö—Ä–æ–∫ 3: –Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î ({category_name})?</b>",
        reply_markup=get_generic_problem_categories_kb(main_category)
    )
    if main_category == "office":
        await state.set_state(DiagnosticStates.waiting_for_problem_category_office)
    elif main_category == "appliance":
        await state.set_state(DiagnosticStates.waiting_for_problem_category_appliance)
    elif main_category == "av":
        await state.set_state(DiagnosticStates.waiting_for_problem_category_av)
    elif main_category == "etransport":
        await state.set_state(DiagnosticStates.waiting_for_problem_category_etransport)
    await callback.answer()

async def handle_other_subcategory_problem(callback: CallbackQuery, state: FSMContext, category_prefix: str):
    problem_type = callback.data.split(f"diag_{category_prefix}_problem_")[-1]
    await state.update_data(specific_problem_type=problem_type)

    description = f"–ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ–±–æ—Ç–æ—é –ø—Ä–∏—Å—Ç—Ä–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_prefix}'. –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞."
    if problem_type == "no_power":
        description = f"–ü—Ä–∏—Å—Ç—Ä—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_prefix}' –Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∂–∏–≤–ª–µ–Ω–Ω—è–º –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."
    elif problem_type == "malfunction":
        description = f"–ü—Ä–∏—Å—Ç—Ä—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_prefix}' –Ω–µ –≤–∏–∫–æ–Ω—É—î —Å–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º."

    await show_diagnostic_result(callback, state, problem_description=description)
    await callback.answer()

@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_office, F.data.startswith("diag_office_problem_"))
async def office_problem_chosen(callback: CallbackQuery, state: FSMContext):
    await handle_other_subcategory_problem(callback, state, "office")

@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_appliance, F.data.startswith("diag_appliance_problem_"))
async def appliance_problem_chosen(callback: CallbackQuery, state: FSMContext):
    await handle_other_subcategory_problem(callback, state, "appliance")

@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_av, F.data.startswith("diag_av_problem_"))
async def av_problem_chosen(callback: CallbackQuery, state: FSMContext):
    await handle_other_subcategory_problem(callback, state, "av")

@diagnostic_router.callback_query(DiagnosticStates.waiting_for_problem_category_etransport, F.data.startswith("diag_etransport_problem_"))
async def etransport_problem_chosen(callback: CallbackQuery, state: FSMContext):
    await handle_other_subcategory_problem(callback, state, "etransport")


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" ---
@diagnostic_router.callback_query(F.data == "diag_back_to_device_choice")
async def back_to_device_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>–ö—Ä–æ–∫ 1: –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é</b>",
        reply_markup=get_device_type_kb()
    )
    await state.set_state(DiagnosticStates.waiting_for_device_type)
    await callback.answer()

@diagnostic_router.callback_query(F.data == "diag_back_to_pc_category")
async def back_to_pc_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>–ö—Ä–æ–∫ 2: –Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î (–ö–æ–º–ø'—é—Ç–µ—Ä / –ù–æ—É—Ç–±—É–∫)?</b>",
        reply_markup=get_pc_problem_category_kb()
    )
    await state.set_state(DiagnosticStates.waiting_for_problem_category_pc)
    await callback.answer()

# –ù–û–í–ò–ô –ö–û–î: –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∑ –≤–∏–±–æ—Ä—É —Å–∏–º–ø—Ç–æ–º—É –µ–∫—Ä–∞–Ω—É –º–æ–±—ñ–ª—å–Ω–æ–≥–æ
@diagnostic_router.callback_query(F.data == "diag_back_to_mobile_category")
async def back_to_mobile_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>–ö—Ä–æ–∫ 2: –Ø–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å —Ç—É—Ä–±—É—î (–°–º–∞—Ä—Ç—Ñ–æ–Ω / –ü–ª–∞–Ω—à–µ—Ç)?</b>",
        reply_markup=get_mobile_problem_category_kb() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–±–ª–µ–º –º–æ–±.
    )
    await state.set_state(DiagnosticStates.waiting_for_problem_category_mobile) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω
    await callback.answer()
# –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–ì–û –ö–û–î–£

@diagnostic_router.callback_query(F.data == "diag_back_to_other_main_category_selection")
async def back_to_other_main_category_selection(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>–ö—Ä–æ–∫ 2: –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞—à–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏</b>",
        reply_markup=get_other_device_main_category_kb()
    )
    await state.set_state(DiagnosticStates.waiting_for_other_device_main_category)
    await callback.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É" —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
@diagnostic_router.callback_query(F.data == "diag_restart")
async def restart_diagnostic_flow(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "<b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º</b>\n"
        "–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—É –ø—Ä–æ–±–ª–µ–º—É –∑ –≤–∞—à–∏–º –ø—Ä–∏—Å—Ç—Ä–æ—î–º.\n\n"
        "<b>–ö—Ä–æ–∫ 1: –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é</b>",
        reply_markup=get_device_type_kb()
    )
    await state.set_state(DiagnosticStates.waiting_for_device_type)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏" —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
@diagnostic_router.callback_query(F.data == "diag_show_contacts")
async def show_contacts_from_diag(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(KONTAKTY_TEXT, reply_markup=None)
    await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")


# --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---


@dp.message(CommandStart())
async def handle_start(message: Message):
    await message.answer("–ü–∏—à–∏, —â–æ –±–æ–ª–∏—Ç—å. –Ø–∫—â–æ –∑–Ω–∞—Ç–∏–º—É ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º. –Ø–∫—â–æ –Ω—ñ ‚Äî –ø–µ—Ä–µ–¥–∞–º –ª—é–¥–∏–Ω—ñ.", reply_markup=main_kb)

@dp.message(Command("help"))
async def handle_help(message: Message):
    help_text = (
        "<b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É KoSA Service:</b>\n\n"
        "–Ø –º–æ–∂—É –Ω–∞–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏:\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>\"–ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤—ñ—Å—É\"</b>, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∞–¥—Ä–µ—Å–∏ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ä–æ–±–æ—Ç–∏ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö —Ü–µ–Ω—Ç—Ä—ñ–≤.\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>\"–ö–æ–Ω—Ç–∞–∫—Ç–∏\"</b>, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—à—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∏.\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>\"–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\"</b>, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –Ω–∞—à—É –ø–æ—Å–ª—É–≥—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ—Ö–Ω—ñ–∫–∏.\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>\"–©–æ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ?\"</b>, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ç–µ—Ö–Ω—ñ–∫–∏, —è–∫—É –º–∏ —Ä–µ–º–æ–Ω—Ç—É—î–º–æ, —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Å–µ—Å—É–∞—Ä–∏.\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>\"ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\"</b>, —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º.\n\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ <code>—Ä–µ–º–æ–Ω—Ç –ø–∫</code>\n‚Ä¢ <code>–Ω–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è</code>\n‚Ä¢ <code>–≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏</code>\n‚Ä¢ <code>–≥–∞—Ä–∞–Ω—Ç—ñ—è</code>\n"
        "—ñ —è —Å–ø—Ä–æ–±—É—é –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    await message.answer(help_text, reply_markup=main_kb)

@dp.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    if current_fsm_state is not None:
        return

    text = message.text.lower()
    response_text = None

    if text in keyword_responses:
        response_val = keyword_responses[text]
        response_text = response_val() if callable(response_val) else response_val
    else:
        for keyword, reply_val in keyword_responses.items():
            if isinstance(keyword, str) and keyword in text and text != keyword:
                response_text = reply_val() if callable(reply_val) else reply_val
                break

    if response_text:
        await message.answer(response_text)
    else:
        await message.answer("–ù–µ –∑–æ–≤—Å—ñ–º –≤–ª–æ–≤–∏–≤(–ª–∞) —Å—É—Ç—å. –ú–æ–∂–µ, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ —Å–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏? üòâ –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

async def main():
    dp.include_router(diagnostic_router)

    # from aiogram.types import BotCommand
    # commands = [
    #     BotCommand(command="/start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
    #     BotCommand(command="/help", description="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö")
    # ]
    # await bot.set_my_commands(commands)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
